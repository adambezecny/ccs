package main

import (
	"bufio"
	"bytes"
	"fmt"
	"io"
	"os"
	"strconv"
	"strings"
)

/*
 * Complete the 'palindromeIndex' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts STRING s as parameter.
 */

func isPalindrome(s string) bool {
	var reversedS bytes.Buffer

	for i := 0; i < len(s); i++ {
		reversedS.WriteString(s[len(s)-i-1 : len(s)-i])
	}

	return reversedS.String() == s
}

func palindromeIndex(s string) int32 {
	if isPalindrome(s) {
		return -1
	}

	for i := 0; i < len(s); i++ {
		if isPalindrome(s[:i] + s[i+1:]) {
			return int32(i)
		}
	}

	return -1
}

func main2() {
	str := "lcpsklryvmcpjnbpbwllsrehfmxrkecwitrsglrexvtjmxypunbqfgxmuvgfajclfvenhyuhuorjosamibdnjdbeyhkbsombltouujdrbwcrrcgbflqpottpegrwvgajcrgwdlpgitydvhedtusippyvxsuvbvfenodqasajoyomgsqcpjlhbmdahyviuemkssdsldebesnnngpesdntrrvysuipywatpfoelthrowhfexlwdysvspwlkfblfdfultbwpiqhiymmyalcyeasvxggfitknygyvjxnspubqjppjbrlhugesmmxwjjlkrmgbnwvftyveolprfdcajiuywtvgfjrwwaakwyprxnxpypjgtlhfteetxbafkrejsfvrenlebjtccgjvrsdowiixlidxdiixpervseavnwypdinwdrlacvanhelkovkedcaxgctwysocddagwnjbkjorpceeyokeskcanvyornrustephpqtbhlrkrxlgjpavrcjpbyhosfimlavbtqcdevpwubfgshcmlofmpmektoyfquimnnqujgrgkymfjrsuixixmoihdhoveajsnanyihgsiuyrotnwtxwgmhprqhpvhyqwbgvmpefxagqqcgovenfsvummecklebihjhtylcalksfnytlfjqafoosssfhwhrfsybsldsyonecmantkhtrvkmqdsxdaqksrlnfpifevlikoxebfasdkguoyurbncvgpklfuslrhvevujwcjpiwxfnwafxojwwyhkheesxlpdjmmiqxxywwekvhpwvbtsbddihjdgwujijxqbxpcvojgkqyjoadjdgonobrwxmghwgaaepeagnhtggduihgmpvaewrbwhjggphiuymwibecjmhhvqnkhlklkfpiobquradoaplkssmdhvkfnapumdiwiahwcbtvbykdoxnkscpbycgmcyhqcrqksxjubfqdedisdwfwyuaawimchvsjojvjkhelmwqqcamhyrexpgbopnqwmmjdvfmgpqucpltrlibmagnrooheeaeqmntlugtkyopobliotkcvspojgxokxucnixyffssgkixlvicpuglpxaaeaoryjtottnbbitiseggaqlrmrecsgcyhsqicmwxhmaiwvsqdbyfskxffejxkmytfqckfbiopixnhsgkufpnqnuvrevfsuyynelthtkxfinmetyyboorflpyplgljimwmxstretyojnsdmtfeiyjtpkmdtamcmmokfkelhedqrvwfselddwauhmyboldbxtlghrrovufqtexmijrmgrjpgituuwvutjbbcvpaswqocqdmavyinlyutspqromnxpocngdhevvinaupvwbjiagcuwvolidlarqoytvfrtnhtkarhbepdkuxhqmubpjbiarjvponkexgoxbybfoeplcaeqwhjgltgddcttsgxsmosnntufxlscnxukferqxawddqwxwwqlmjcadwhdkbhxyelgjdajdwnipkgokwawieynejqokaplfbrqetcjqpuidbwnbamlenaiwqahtpubsptyjvidmdlrhjhkjtvpjvyhpbqlsmmlcgkneuqsydkimruvnqlapmjhpasioftsnehtaxnbbxlpsgniyckootvhwqplxmhlsoguovvsvjiorwarykiphhyexprweykwpssfoqaldkcuhemipvbwfcddtucxunvkiqrxhrlkdnimsuxksbjxdmexhgxevtrfmjfweqjjgrxbnvniywjflpfvxdauarcmehjiatrilpkboxmpxvujnahleiigcksgtdqvyifkbporpbhnyfamhhxlrhtwtndosukrfreihsaavknuppjwailtrfqnuuenrrfwjkitfitcujwmahkcrxvlfpybmgoexwdhhnbmwuotfohhxtlprjdyyealkrrioxqvltkkpcfwqogoirgablydpcqbtljilcgywqkourllircqlksmvtrmvjpruyagcifbarpwlbjtunkgbfuwanlvybotdqchahiccxypbkkvywecdyydonbnqpjtjlbjvjnajopkaagbamddoeidtjtlcfhlrjwpukphyhrbibcknhncoviifethjcubnrskekrgsmhdnmndvbgkyqtgupoetlihebuiomohbykonxsjbbuatqgogwubjdkphfxxupfvqrnepipslksfbbtkbqnkwxaggaebrjykbooswflirgpvjlikdvwatygaakdtvffytvrtdfevlutuicilxfntfvwhiadehidehwakceipbclkgvxebmbikxrtavaiggmndmbisjxuolhwhheltfthdmbdkdlqjahpoixitxfkkoitvmfsraauodaygmrqoyiejioegtqskyngnsyfubcledmlrfeieomowdufylyjlosbjrhhvlsaqgnklttrkiihmdpnroxffqgoknxgcrjuaygnvcfgkqoytgnlunqcexsqnrarjjnlkvygxgnkwemtkchhpblvyeoovojhawslstrsbhdanptatcjjfuhgawuvngeodyaxttswewwrotsjxeudafjaegxrncgseitxdmuhltbdpvonblqbqcdwjbpyexrihnimbftobwrrtgfwsyxldbjmcbniyisgvduyioomogekpjhkkhvoifdmirxiasqvymvjdmvrsackmluwsrldyrqijqsjljhkvfucrqvnryxgktdgnrjojcyssrefenrctmelgbbxcaeovjulbfcmhchdvlkaccdvphjxklxmneclnyyrebeodoraccceefavpktaxrpnvtymsaexbkmhyejcilgmrjljvfjtabhxuikoioolcdsbhcfrqmeivrtrafnahwxchjsrahdckwgtbllrxscvkvpmefmlennlyjdyqjecikvjxkeydiuphndlsrwafmlgvrinbmrjypuwcbvhktxrhddcwcefoqlnktdniuwjmthpvfwgywaicdnafrfvkqlunoixlhibcpqaupiwnihplupspwqaqdxeticiqkjucawapfyfngvyenttlmvertimdmuvaeqegnevsfeimahspdmdpkhifrwkhtghxyleoschxgpmiyfbetgvfogmidwpwfwweldsgicgqttcubdbxjwfaetjjqyjxygckmwqubylusprwsswfrehvxqiosrmraqempwjqvxnrnfohanorrvqppygiquaqnegdbptwnjqcqhlquakoxbencmvshxmuesahkvfyfxdxgoobqcqofwfikbbtcppgirotovuvtxuaolefnuvttbceffyhvqngiecyayvwwqwlcbsqxpmsqqyvvxftqvbcafbdfwaenwssbllbbxtuovsmvyhnukpwrsawsaeiawbdimemmbhbwcqsbaixmaxetxembiwdfyinlocbpjeomukpusqhvooposerdbwicfxqwbromvebtqtojkyfbpwridmnhlvltvcqyvfmslpmcjdovevwtvreygrirpwlmyclviaqvqfyaknwpjvlfpqhvkrobocpqfdopeflwmmwwavokubrkryjetaficuyjynyfunchabhbxvnuwhhqjqvdqdnvbnfcdhhbuliumrxmonhnxphhidmciaxjpdlvkuwhghfvadiotserklbuqnwanulgbxcnuyxegdagikwefcvppwnhmkhbishlsjbokysqcuxnfwrnyqfppsydeggobpawbbnlbicfdcskalxbcgsryrwdxdrcstbtvofywkecmaoolpqpvjjuchbckuggphanvimusqyhqqwegnveygbbpcgcamipulfsvrqokrxeiuiqkhwmpynfdvjdjuugiabetrufmsjwqtoddnpsmgaqcmvnhrtptvtopovcjfaabqgfevaredkhpgwwarounildyhgioilryrydpawwfhguqdrquinkqyoriwcwhnrghqlasjwxsfujiodewqopsfhbekblautklgmhrlhkqdwyrafpswfleppjaswcnrmyxbipmqcdvbfndkfwjlkodcafuwhiowkmxselljohktvqhdnqqahtdhyafhjtgtjeoppbbhimdgdkksebulvatubbemukggpuyhxaqhouprhamnekcakvwnyeavogdgeeqcehltecnoedeingkaekodooadxfmejdinmujtyxiddmoqvysajhexyeewjqduvliiiuchumnxccqxdjanrensktrvmuqigctpwxyrnmppogpurpilwxehuvehswscyotvospciftynjticetydyixwohsmaunqomgjcirkfraqlisqdtvedvdrfveissyjhftjqntvhwotfimkekohiuanqgvmbvvidrutgqrnnjjttxgxixgqsihlqdxsbudfmxbupvjdfuyytiwcgfvyndkhilakidpweqstmeytybsujsarxvqobdvjqxtydlwjdpdrvfowihstcsldqerrhpdypxaujwfookjkpxkahdtkvhnmlhgtyjuqjulvuqmlcvytvjugmqqkygympfgqqdhbbswxmljokikgthmiyfsanrmdyvtqbdtewscjeoaoykxtsmctuvvipkorgkikoeonwrydgysflsbgfecccaltlcltmtebxtqwnpbvqvdfoflvlqynqmheovybpffqbvpomqmdoqifxwclpdbipinegohwtmpvjhmvbabpsmvslaeddflspbywpgvktngfusdvueonskigkmjprviiwjhnpdajqioldtkyyyotjxbvkklfivpgfwvwaxjsgagjuqktpapbaqykcmrmihspeqngowyuyghtwrpprgsrwsfbfwoqhjgldvurutpucwocofrjlkdkfkolkfcrokfrjamewcbybqbrxublihvnrmberfvhqcbcengbrkdsdglbeommvkcqaeurjrycvdeaqnelxhebnperfsgdfjtfprxbjyghckjvanhxunblgffnxmqexnjpfhqqjwxlkjjkxsluhminsobsdtybjjsosjhcjhqtrcgpvrmfhvsckvupruqcglsbubegkwccyltwdhcmfwopumfnjxrpjmqgpwpbvrfvfasjjxxoungqcnglnadymvhdtwerrlnwljiwhhnewtubjdmwdrvqnevjbccunrscddykkprjjokvsysxqpqhvmsyquufpphssiggxxrkodghcygvqydomxodvlklbrgvdoebowlectlgttcmthcigsnceyphsvfxlkaajnelisteoyskgwsopjstikbdjjcwveyfteseymkplebubtlrfhnprrtdbxawcacxgwdflnuxrvuvsipapdqkumnxkouoqymwvpckgykaxfvsplsgrlsoxiniyiypkomieqsmsdnqkjlbxgjpsceqkrcmdbcnppxwgrjyuyrijfjjmsyhwfxjacvfgyuxqswwkhyigsqrycbnwcutkudkacpgdmetfcssltdtnvooxreuubqfxvrxxjebvlwdpqvdkyyawnougsrdvikuhcsflajjngmdylikmhkkvchewcjtmtotxhclhluutjatuieisquoscuqeemrablxipjsbepxpsrldxtvqomkshdxnprnsfndvwvydowthohmobjgrvsmgxmtpekimankxkjdbhykxgwpjgxddqqlqdhgktqwuehuqsxtaxebecsqkqtphkbaojibdbxxhhsyatsdtagaeyqoplfyviymtjnxknxrutsxpmdjojjskbhcmobkxcxtllrxaspwojwexapmlyhvcoxqgbcgfaasnuqppjpesmkspafbbmxgdxwlcyrhbubrpthfdylxmxqcaxfdmdjqehcgiwpkrscjplqslcraakecjjfvppovytehqtrkpvtfkkaxorxqfcsonxkdpcbovfwmaqwrpswadwxtrxkwcfnpdavvcwkxdhmfblwqevqjuqdoopnqubgbeewgchhhrtosgljkjcwesathshxnlgqplnvpxdwpanigbtskvpqoskxluvbiesxpgvhecgvctgkuadfxtyoolmagkdopvohflrlnxirsqcprfxrbwjpivrrjvibtxkyjclybvqvoslixlbcikrtimlritucrgedirclpuhenvnohoqsbkmjyaehtymofqtqkycatmekkrytirmjebvebanxbamjsgadfedcqkmbclxnfkwlouppugnwicgcjihqmnsexfhcshpaspohkgygmpfvrnabvhukupqsxbvsilvbdkkoqmweccatraxpjuafkraisvebkafnkrebebhidjdxwldmvxnbkfdvxaabmagcmbhpfixqohtltyyrymujtxftahumhervfymmjkdxtympxnhwccjvborbymqisifxjrnseqtxqgqqtxqxdatgqnjpaayvkevtxjpcbjctrskntdlwdhduummwplsarrwpbmtexwarrnflqskuaprwdetuqpwihvbkkupitramfhawaltcblygptdilbtsyudkpuuknvwufyrgmnkqykwrgdcrgvmfqpphnlrdjqxorswfgkviuucbxeuebhmrwcbmpupbnqsgjplrahcweeadjujmcvecbiqsdhuranxjfldiugfymgevdokimpkpabjdkewkruvwicfdinduvjtyxehnvtdvxocisyvmwtmfvtjehocdxxfyeombjryhhbrcdppakcfgvqngfrlgpsftitwtnwduawadnrfxtngretakloqdhxxprwlfvodwmfcawkasxgmcdnoqchulfucyrphofmnrrrtqcvjacxfhltypetcjoglivuwdhmwbfsthodktbpbplchpvlcmtnvskuvtivupoqwetjxwbbonewdckhpfwnxhkvburxkhoklktlkvoylsxqxjynqvdognkhjfitmwgakbnuycvkxubxgalwyqnfgaorfwotwuvhvjeuoahowjmfjaeisrpyufraciwbdsicfoytrhkoqwwcybnrvdqqkksnspowlabqqamihwaatwdsaqkvvdmhogwjxnijpjchkortlruhqxcrqoposdvjlusljcxbnaixpbsbunjonngedvuvbtfooadaebcsdmssplwlbiaoviuygsukmcbbfeelhieluaelldyplbgilejtwhejlimqosdwbjiwjokxulpgovqccbvbkdmvlapcuuywejvqbgqvtgeievkhyiijlvhyxwcsrdrwnnpqtgmpoqxsokcptlbhjjhjglcbowackpshxhwmbxhrikiexlohuvqejufxrfddwxmugjjjjqbubjyyvngslyyuwevqlyviwiffsoocgqwhcyjaorvdruaqavhnweyumechvrmcijlmkuncpjfhefagehwblvxycbgxusafforrlhtbsykahkglsfogbnfeqocnjfsqvkjhudlnfvnojwaecqkegqkyhomqtfkpstanyldghrusqwwsqiywblwibjburlnmhnajyfriyncpmbjdjkdkwauxlwufkiruxtgwaxiynmpbnbgxnjkklgkafgfrqxmptumttwvhjnkxorxcdippoartgwmxwbptwcnsclalynlnhjsmskejkvgtvstsvjoundnpoqeqepenayaujfewbkqwfmsevhylmncegiumxbaadcuohallmeksqfwopxbenfitnfgnjioonjdulpiyvvtnbsessfxhmidcqmqaufoiqtgfjqegmavquajnihuwqyahlsjiaatqtcxgscogemwymgnwqiujjwswpcgpecixehgwlufqjerwnfveqspcpiafmiwqkiqqrapfwvxhaqgpxcvovltltttgesyodsfusudrsbyvrflsiijgtdrqwnydjbrmvykqwniroinjncexmneirybqobuxeolaqvqnlyhchxlxapvogdwxebqsclrgddgtbwjoxqqgofgqwehdhhdliufmiyslebffaqvximgytmsrrcwyjbnrxuegtysxcafcrbbcpjdkwxeobbpkeffcaljtnerpgysaavcqfideghuhinunscrvnbrbhktolmomktfrciwkptuahrpdtiyjlqntdhkpvbegujaytwkjthlbycesmfeawrtcbgrwivffhgfbfrmyyybadhsrnyrmroosujqfhxlpesskkgllholmwgemfvyympskylphldyqvrdixovhejtdrxpxwqylgrvgfoprrokqgpbheaqkjlpclfckxbwfvsndjdwerjuayxjgxbqkmhoaoqlntispdivnlstfdohcorkpuccjlqjajwpdfkvlsrbemulrltwcnhrijtrwkdxvbpaibvttpwbermwfitivbaenwxkjekgfbgncekxvhyacmwhusprwsxkpywydkhknpapvkprupuwcrgynyskrtujstkxesiriijfvawqptptoxscwomqijabflbkejeototpqtiinaccywgxlsptepwkdxuhhbwepstimfqdfuhgsofgjubomayqyvaiwympsjxhqrmxmufhjkoshrjtrimsgncgmqvfcvpunctdwykilycsqlolwcedpilcchkggacvcvyawkkilmbfbpqatufjgroibyohyqgdofflrqtgfwlgpcijyovhgkphjhrkxxppfvbaoxgturdmvlywcufifwsqekdfksupqxrhvxetrhgpufnxaughtbxyndgxydqrbiaxherbnxrighigerqxsoyhuhftkxnmhpkqterjclskubryuiaoyyvvjdrtegglvseswxcckwmfbehvohkqiimrofmslugjomclkfnwebffhmcytopexcyohljuipfwcjloqymvcrbkeflaubgudfjnsskckryoemdumpqqhudnaopwpwtvcdlvxvxkqyyumfpbujrfgxuimlgdiabkgmigkitbiuxwaqxxarfgpaofnwkxalliatokdiongokgfkefelnumfcccmbcxmkxgcklmbysqlcvvieburxjyalcomgmytmixwtmytirfknesthnohwnjlrxxykauyiuvehwapogcfmvytlndlemwvkwwwwrvhotmytooiurpjprfbhimlulihjfeiacsowfpqvfbrytdoljrurfhpspwcwelwieohlexhlcbmxfblqvgidnxvfvyfcmeksssgaspnwrbuyegpcpaffyclwbqbpuliqgqsagiyaluysdquutbbsdorghuxegiupyppfbogmlhfrbdmueppjehplcnqkxnawgrchjkvuucovfeqltguypmmtcdeathwaybhimfghjwfqbvcvewwtjjnlntnjbkjdmslbxtkirpysleqpdnlnxybnspwwciaobnrbiclcrlufrowucikcjmrfeociyeaarrecwpeqdcwuqvquhbxsppxvhcfggfjbwndvdknhmmcdksxrwxlmoljxooewvnxuberhofobrsgcogwlfkavvjtkaxkvoirrmlydqpeklmoatnnyxnwuaqhcqrbhbuapgytwrajdnadhosimifhkxpnqhoyklydrawqryawmactoueegllqjdebnucagbdadcqxcsuotxlkupqbcfsniyqxwsyfvcgafyxhsuxoujbqcstgxotiolhngisdmbfrbfbtackvllonekteaqpqewekhyptbuocarxdtibgvrvdcshejwupvbaddqaenoiqiitdsuloohrqcavnysdxwebawdgmtoddyygrvrgkbycgbatcuxatcetbhcncqtfrsnjphqckreqsgluejxxncsqjwgnoauivisnrjpdbwvvfhsjsqiisdyfagsqioaeysrrekwhhsfmdxwvrhfmkgrmmlevcgcdywufhtmqprdsrcqjjxwvfqlteppgxukyrhebesrtkumeadqlepkjgvdlnvtlqgkkoqlsjdovabaagsmkiytruadkvyvogiywykringenjgqpafdieyayyflwhhlnrkmqugbkofyxlrplwswbuyctfnrowdeoqqfnygynnanbrdpoymrvntpujjjgnnuggctfkssauiboosdpfwlvqbqalbibqfjxjddtyyv"
	fmt.Println(palindromeIndex(str))
}

func main() {
	reader := bufio.NewReaderSize(os.Stdin, 16*1024*1024)

	qTemp, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)
	checkError(err)
	q := int32(qTemp)

	for qItr := 0; qItr < int(q); qItr++ {
		s := readLine(reader)

		result := palindromeIndex(s)

		fmt.Printf("%d\n", result)
	}
}

func readLine(reader *bufio.Reader) string {
	str, _, err := reader.ReadLine()
	if err == io.EOF {
		return ""
	}

	return strings.TrimRight(string(str), "\r\n")
}

func checkError(err error) {
	if err != nil {
		panic(err)
	}
}
